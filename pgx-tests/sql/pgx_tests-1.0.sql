/* 
This file is auto generated by pgx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- pgx-tests/src/tests/xact_callback_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::xact_callback_tests::tests */

-- pgx-tests/src/tests/variadic_tests.rs:15
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::variadic_tests::tests */

-- pgx-tests/src/tests/schema_tests.rs:26
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::schema_tests::tests */

-- pgx-tests/src/tests/struct_type_tests.rs:59
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::struct_type_tests::tests */

-- pgx-tests/src/tests/srf_tests.rs:65
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::srf_tests::tests */

-- pgx-tests/src/tests/numeric_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::numeric_tests::tests */

-- pgx-tests/src/tests/json_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::json_tests::tests */

-- pgx-tests/src/tests/default_arg_value_tests.rs:20
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::default_arg_value_tests::tests */

-- pgx-tests/src/tests/hooks_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::hooks_tests::tests */

-- pgx-tests/src/tests/guc_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::guc_tests::tests */

-- pgx-tests/src/tests/datetime_tests.rs:110
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::datetime_tests::tests */

-- pgx-tests/src/tests/array_tests.rs:85
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::array_tests::tests */

-- pgx-tests/src/tests/cfg_tests.rs:14
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::cfg_tests::tests */

-- pgx-tests/src/tests/enum_type_tests.rs:21
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::enum_type_tests::tests */

-- pgx-tests/src/tests/pg_try_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::pg_try_tests::tests */

-- pgx-tests/src/tests/name_tests.rs:7
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::name_tests::tests */

-- pgx-tests/src/tests/postgres_type_tests.rs:64
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::postgres_type_tests::tests */

-- pgx-tests/src/tests/log_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::log_tests::tests */

-- pgx-tests/src/tests/fcinfo_tests.rs:100
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::fcinfo_tests::tests */

-- pgx-tests/src/tests/xid64_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::xid64_tests::tests */

-- pgx-tests/src/tests/spi_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::spi_tests::tests */

-- pgx-tests/src/tests/memcxt_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::memcxt_tests::tests */

-- pgx-tests/src/tests/bytea_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::bytea_tests::tests */

-- pgx-tests/src/tests/pg_extern_args_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::pg_extern_args_tests::tests */

-- pgx-tests/src/tests/schema_tests.rs:5
CREATE SCHEMA IF NOT EXISTS test_schema; /* pgx_tests::tests::schema_tests::test_schema */

-- pgx-tests/src/tests/anyarray_tests.rs:13
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::anyarray_tests::tests */

-- pgx-tests/src/tests/variadic_tests.rs:4
CREATE SCHEMA IF NOT EXISTS test; /* pgx_tests::tests::variadic_tests::test */

-- pgx-tests/src/tests/inet_tests.rs:5
CREATE SCHEMA IF NOT EXISTS tests; /* pgx_tests::tests::inet_tests::tests */

-- pgx-tests/src/tests/xid64_tests.rs:15
-- pgx_tests::tests::xid64_tests::tests::test_convert_xid_to_u64
CREATE OR REPLACE FUNCTION tests."test_convert_xid_to_u64"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_convert_xid_to_u64_wrapper';

-- pgx-tests/src/tests/xact_callback_tests.rs:15
-- pgx_tests::tests::xact_callback_tests::tests::test_xact_callback
CREATE OR REPLACE FUNCTION tests."test_xact_callback"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_xact_callback_wrapper';

-- pgx-tests/src/tests/variadic_tests.rs:22
-- pgx_tests::tests::variadic_tests::tests::test_func_with_variadic_array_args
CREATE OR REPLACE FUNCTION tests."test_func_with_variadic_array_args"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_func_with_variadic_array_args_wrapper';

-- pgx-tests/src/tests/variadic_tests.rs:8
-- pgx_tests::tests::variadic_tests::test::func_with_variadic_array_args
CREATE OR REPLACE FUNCTION test."func_with_variadic_array_args"(
	"_field" text, /* &str */
	"values" VARIADIC text[] /* pgx::datum::array::Array<&str> */
) RETURNS text /* alloc::string::String */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'func_with_variadic_array_args_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:84
-- pgx_tests::tests::struct_type_tests::tests::test_complex_out
CREATE OR REPLACE FUNCTION tests."test_complex_out"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_complex_out_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:108
-- pgx_tests::tests::struct_type_tests::tests::test_complex_storage_and_retrieval
CREATE OR REPLACE FUNCTION tests."test_complex_storage_and_retrieval"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_complex_storage_and_retrieval_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:92
-- pgx_tests::tests::struct_type_tests::tests::test_complex_from_text
CREATE OR REPLACE FUNCTION tests."test_complex_from_text"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_complex_from_text_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:67
-- pgx_tests::tests::struct_type_tests::tests::test_complex_in
CREATE OR REPLACE FUNCTION tests."test_complex_in"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_complex_in_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:50
-- pgx_tests::tests::srf_tests::return_some_setof_iterator
CREATE OR REPLACE FUNCTION "return_some_setof_iterator"() RETURNS SETOF integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_some_setof_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:152
-- pgx_tests::tests::srf_tests::tests::test_return_none_setof_iterator
CREATE OR REPLACE FUNCTION tests."test_return_none_setof_iterator"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_none_setof_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:130
-- pgx_tests::tests::srf_tests::tests::test_return_none_iterator
CREATE OR REPLACE FUNCTION tests."test_return_none_iterator"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_none_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:15
-- pgx_tests::tests::srf_tests::example_composite_set
CREATE OR REPLACE FUNCTION "example_composite_set"() RETURNS TABLE (
	"idx" integer,  /* i32 */
	"value" text  /* &str */
)
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'example_composite_set_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:72
-- pgx_tests::tests::srf_tests::tests::test_generate_series
CREATE OR REPLACE FUNCTION tests."test_generate_series"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_generate_series_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:92
-- pgx_tests::tests::srf_tests::tests::test_composite_set
CREATE OR REPLACE FUNCTION tests."test_composite_set"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_composite_set_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:35
-- pgx_tests::tests::srf_tests::return_none_iterator
CREATE OR REPLACE FUNCTION "return_none_iterator"() RETURNS TABLE (
	"idx" integer,  /* i32 */
	"some_value" text  /* &str */
)
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_none_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:141
-- pgx_tests::tests::srf_tests::tests::test_return_some_setof_iterator
CREATE OR REPLACE FUNCTION tests."test_return_some_setof_iterator"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_some_setof_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:6
-- pgx_tests::tests::srf_tests::example_generate_series
CREATE OR REPLACE FUNCTION "example_generate_series"(
	"start" integer, /* i32 */
	"end" integer, /* i32 */
	"step" integer DEFAULT 1 /* i32 */
) RETURNS SETOF integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'example_generate_series_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:119
-- pgx_tests::tests::srf_tests::tests::test_return_some_iterator
CREATE OR REPLACE FUNCTION tests."test_return_some_iterator"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_some_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:55
-- pgx_tests::tests::srf_tests::return_none_setof_iterator
CREATE OR REPLACE FUNCTION "return_none_setof_iterator"() RETURNS SETOF integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_none_setof_iterator_wrapper';

-- pgx-tests/src/tests/srf_tests.rs:24
-- pgx_tests::tests::srf_tests::return_some_iterator
CREATE OR REPLACE FUNCTION "return_some_iterator"() RETURNS TABLE (
	"idx" integer,  /* i32 */
	"some_value" text  /* &str */
)
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_some_iterator_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:144
-- pgx_tests::tests::spi_tests::tests::do_panic
CREATE OR REPLACE FUNCTION tests."do_panic"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'do_panic_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:74
-- pgx_tests::tests::spi_tests::tests::test_spi_get_one
CREATE OR REPLACE FUNCTION tests."test_spi_get_one"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_get_one_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:32
-- pgx_tests::tests::spi_tests::tests::test_spi_returns_primitive
CREATE OR REPLACE FUNCTION tests."test_spi_returns_primitive"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_returns_primitive_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:125
-- pgx_tests::tests::spi_tests::tests::test_spi_get_three_failure
CREATE OR REPLACE FUNCTION tests."test_spi_get_three_failure"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_get_three_failure_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:149
-- pgx_tests::tests::spi_tests::tests::test_panic_via_spi
CREATE OR REPLACE FUNCTION tests."test_panic_via_spi"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_panic_via_spi_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:12
-- pgx_tests::tests::spi_tests::tests::test_spi_failure
CREATE OR REPLACE FUNCTION tests."test_spi_failure"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_failure_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:98
-- pgx_tests::tests::spi_tests::tests::test_spi_get_three
CREATE OR REPLACE FUNCTION tests."test_spi_get_three"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_get_three_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:44
-- pgx_tests::tests::spi_tests::tests::test_spi_returns_str
CREATE OR REPLACE FUNCTION tests."test_spi_returns_str"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_returns_str_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:112
-- pgx_tests::tests::spi_tests::tests::test_spi_get_two_with_failure
CREATE OR REPLACE FUNCTION tests."test_spi_get_two_with_failure"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_get_two_with_failure_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:59
-- pgx_tests::tests::spi_tests::tests::test_spi_returns_string
CREATE OR REPLACE FUNCTION tests."test_spi_returns_string"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_returns_string_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:139
-- pgx_tests::tests::spi_tests::tests::test_spi_select_zero_rows
CREATE OR REPLACE FUNCTION tests."test_spi_select_zero_rows"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_select_zero_rows_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:19
-- pgx_tests::tests::spi_tests::tests::test_spi_can_nest
CREATE OR REPLACE FUNCTION tests."test_spi_can_nest"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_can_nest_wrapper';

-- pgx-tests/src/tests/spi_tests.rs:85
-- pgx_tests::tests::spi_tests::tests::test_spi_get_two
CREATE OR REPLACE FUNCTION tests."test_spi_get_two"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_spi_get_two_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:38
-- pgx_tests::tests::schema_tests::tests::test_in_different_schema2
CREATE OR REPLACE FUNCTION tests."test_in_different_schema2"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_in_different_schema2_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:43
-- pgx_tests::tests::schema_tests::tests::test_type_in_different_schema
CREATE OR REPLACE FUNCTION tests."test_type_in_different_schema"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_type_in_different_schema_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:33
-- pgx_tests::tests::schema_tests::tests::test_in_different_schema
CREATE OR REPLACE FUNCTION tests."test_in_different_schema"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_in_different_schema_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:10
-- pgx_tests::tests::schema_tests::test_schema::func_in_diff_schema
CREATE OR REPLACE FUNCTION test_schema."func_in_diff_schema"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'func_in_diff_schema_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:17
-- pgx_tests::tests::schema_tests::func_in_diff_schema2
CREATE OR REPLACE FUNCTION test_schema."func_in_diff_schema2"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'func_in_diff_schema2_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:94
-- pgx_tests::tests::postgres_type_tests::tests::test_jsontype
CREATE OR REPLACE FUNCTION tests."test_jsontype"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_jsontype_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:74
-- pgx_tests::tests::postgres_type_tests::tests::test_mytype
CREATE OR REPLACE FUNCTION tests."test_mytype"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_mytype_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:83
-- pgx_tests::tests::postgres_type_tests::tests::test_serializedtype
CREATE OR REPLACE FUNCTION tests."test_serializedtype"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_serializedtype_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:23
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_no_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_no_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_no_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:54
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_rethrow_no_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_rethrow_no_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_rethrow_no_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:47
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_else_with_nested_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_else_with_nested_error"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_else_with_nested_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:18
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_with_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_with_error"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_with_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:12
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_no_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_no_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_no_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:35
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_else_no_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_else_no_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_else_no_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:29
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_with_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_with_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_with_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:65
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_rethrow_with_error_in_rethrow
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_rethrow_with_error_in_rethrow"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_rethrow_with_error_in_rethrow_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:41
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_else_with_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_else_with_error"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_else_with_error_wrapper';

-- pgx-tests/src/tests/pg_try_tests.rs:60
-- pgx_tests::tests::pg_try_tests::tests::test_pg_try_unwrap_or_rethrow_with_error
CREATE OR REPLACE FUNCTION tests."test_pg_try_unwrap_or_rethrow_with_error"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_pg_try_unwrap_or_rethrow_with_error_wrapper';

-- pgx-tests/src/tests/pg_extern_args_tests.rs:12
-- pgx_tests::tests::pg_extern_args_tests::tests::is_immutable
CREATE OR REPLACE FUNCTION tests."is_immutable"() RETURNS void
IMMUTABLE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'is_immutable_wrapper';

-- pgx-tests/src/tests/pg_extern_args_tests.rs:15
-- pgx_tests::tests::pg_extern_args_tests::tests::test_immutable
CREATE OR REPLACE FUNCTION tests."test_immutable"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_immutable_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:23
-- pgx_tests::tests::numeric_tests::tests::return_a_u64_numeric
CREATE OR REPLACE FUNCTION tests."return_a_u64_numeric"() RETURNS numeric /* pgx::datum::numeric::Numeric */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_a_u64_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:13
-- pgx_tests::tests::numeric_tests::tests::return_an_i32_numeric
CREATE OR REPLACE FUNCTION tests."return_an_i32_numeric"() RETURNS numeric /* pgx::datum::numeric::Numeric */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_an_i32_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:52
-- pgx_tests::tests::numeric_tests::tests::test_deserialize_numeric
CREATE OR REPLACE FUNCTION tests."test_deserialize_numeric"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_deserialize_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:35
-- pgx_tests::tests::numeric_tests::tests::test_return_a_f64_numeric
CREATE OR REPLACE FUNCTION tests."test_return_a_f64_numeric"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_a_f64_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:28
-- pgx_tests::tests::numeric_tests::tests::test_return_an_i32_numeric
CREATE OR REPLACE FUNCTION tests."test_return_an_i32_numeric"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_an_i32_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:18
-- pgx_tests::tests::numeric_tests::tests::return_a_f64_numeric
CREATE OR REPLACE FUNCTION tests."return_a_f64_numeric"() RETURNS numeric /* pgx::datum::numeric::Numeric */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_a_f64_numeric_wrapper';

-- pgx-tests/src/tests/numeric_tests.rs:43
-- pgx_tests::tests::numeric_tests::tests::test_return_a_u64_numeric
CREATE OR REPLACE FUNCTION tests."test_return_a_u64_numeric"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_a_u64_numeric_wrapper';

-- pgx-tests/src/tests/name_tests.rs:3
-- pgx_tests::tests::name_tests::renamed_func
CREATE OR REPLACE FUNCTION "renamed_func"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'func_to_rename_wrapper';

-- pgx-tests/src/tests/name_tests.rs:14
-- pgx_tests::tests::name_tests::tests::renamed_func
CREATE OR REPLACE FUNCTION tests."renamed_func"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'renamed_func_wrapper';

-- pgx-tests/src/tests/memcxt_tests.rs:24
-- pgx_tests::tests::memcxt_tests::tests::test_leak_and_drop
CREATE OR REPLACE FUNCTION tests."test_leak_and_drop"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_leak_and_drop_wrapper';

-- pgx-tests/src/tests/log_tests.rs:79
-- pgx_tests::tests::log_tests::tests::test_panic
CREATE OR REPLACE FUNCTION tests."test_panic"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_panic_wrapper';

-- pgx-tests/src/tests/log_tests.rs:42
-- pgx_tests::tests::log_tests::tests::test_debug3
CREATE OR REPLACE FUNCTION tests."test_debug3"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_debug3_wrapper';

-- pgx-tests/src/tests/log_tests.rs:27
-- pgx_tests::tests::log_tests::tests::test_notice
CREATE OR REPLACE FUNCTION tests."test_notice"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_notice_wrapper';

-- pgx-tests/src/tests/log_tests.rs:22
-- pgx_tests::tests::log_tests::tests::test_warn
CREATE OR REPLACE FUNCTION tests."test_warn"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_warn_wrapper';

-- pgx-tests/src/tests/log_tests.rs:37
-- pgx_tests::tests::log_tests::tests::test_debug4
CREATE OR REPLACE FUNCTION tests."test_debug4"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_debug4_wrapper';

-- pgx-tests/src/tests/log_tests.rs:57
-- pgx_tests::tests::log_tests::tests::test_error
CREATE OR REPLACE FUNCTION tests."test_error"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_error_wrapper';

-- pgx-tests/src/tests/log_tests.rs:12
-- pgx_tests::tests::log_tests::tests::test_info
CREATE OR REPLACE FUNCTION tests."test_info"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_info_wrapper';

-- pgx-tests/src/tests/log_tests.rs:47
-- pgx_tests::tests::log_tests::tests::test_debug2
CREATE OR REPLACE FUNCTION tests."test_debug2"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_debug2_wrapper';

-- pgx-tests/src/tests/log_tests.rs:32
-- pgx_tests::tests::log_tests::tests::test_debug5
CREATE OR REPLACE FUNCTION tests."test_debug5"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_debug5_wrapper';

-- pgx-tests/src/tests/log_tests.rs:62
-- pgx_tests::tests::log_tests::tests::test_check_for_interrupts
CREATE OR REPLACE FUNCTION tests."test_check_for_interrupts"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_check_for_interrupts_wrapper';

-- pgx-tests/src/tests/log_tests.rs:67
-- pgx_tests::tests::log_tests::tests::test_ereport
CREATE OR REPLACE FUNCTION tests."test_ereport"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_ereport_wrapper';

-- pgx-tests/src/tests/log_tests.rs:52
-- pgx_tests::tests::log_tests::tests::test_debug1
CREATE OR REPLACE FUNCTION tests."test_debug1"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_debug1_wrapper';

-- pgx-tests/src/tests/log_tests.rs:17
-- pgx_tests::tests::log_tests::tests::test_log
CREATE OR REPLACE FUNCTION tests."test_log"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_log_wrapper';

-- pgx-tests/src/tests/json_tests.rs:12
-- pgx_tests::tests::json_tests::tests::test_json
CREATE OR REPLACE FUNCTION tests."test_json"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_json_wrapper';

-- pgx-tests/src/tests/json_tests.rs:35
-- pgx_tests::tests::json_tests::tests::test_jsonb
CREATE OR REPLACE FUNCTION tests."test_jsonb"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_jsonb_wrapper';

-- pgx-tests/src/tests/inet_tests.rs:19
-- pgx_tests::tests::inet_tests::tests::test_serialize_inet
CREATE OR REPLACE FUNCTION tests."test_serialize_inet"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_serialize_inet_wrapper';

-- pgx-tests/src/tests/inet_tests.rs:26
-- pgx_tests::tests::inet_tests::tests::take_and_return_inet
CREATE OR REPLACE FUNCTION tests."take_and_return_inet"(
	"inet" inet /* pgx::datum::inet::Inet */
) RETURNS inet /* pgx::datum::inet::Inet */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'take_and_return_inet_wrapper';

-- pgx-tests/src/tests/inet_tests.rs:31
-- pgx_tests::tests::inet_tests::tests::test_take_and_return_inet
CREATE OR REPLACE FUNCTION tests."test_take_and_return_inet"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_take_and_return_inet_wrapper';

-- pgx-tests/src/tests/inet_tests.rs:12
-- pgx_tests::tests::inet_tests::tests::test_deserialize_inet
CREATE OR REPLACE FUNCTION tests."test_deserialize_inet"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_deserialize_inet_wrapper';

-- pgx-tests/src/tests/hooks_tests.rs:12
-- pgx_tests::tests::hooks_tests::tests::test_callbacks
CREATE OR REPLACE FUNCTION tests."test_callbacks"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_callbacks_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:12
-- pgx_tests::tests::guc_tests::tests::test_bool_guc
CREATE OR REPLACE FUNCTION tests."test_bool_guc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_bool_guc_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:115
-- pgx_tests::tests::guc_tests::tests::test_enum_guc
CREATE OR REPLACE FUNCTION tests."test_enum_guc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_enum_guc_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:52
-- pgx_tests::tests::guc_tests::tests::test_float_guc
CREATE OR REPLACE FUNCTION tests."test_float_guc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_float_guc_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:76
-- pgx_tests::tests::guc_tests::tests::test_string_guc
CREATE OR REPLACE FUNCTION tests."test_string_guc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_string_guc_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:31
-- pgx_tests::tests::guc_tests::tests::test_int_guc
CREATE OR REPLACE FUNCTION tests."test_int_guc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_int_guc_wrapper';

-- pgx-tests/src/tests/guc_tests.rs:96
-- pgx_tests::tests::guc_tests::tests::test_string_guc_null_default
CREATE OR REPLACE FUNCTION tests."test_string_guc_null_default"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_string_guc_null_default_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:64
-- pgx_tests::tests::fcinfo_tests::takes_string
CREATE OR REPLACE FUNCTION "takes_string"(
	"s" text /* alloc::string::String */
) RETURNS text /* alloc::string::String */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_string_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:94
-- pgx_tests::tests::fcinfo_tests::same_name
CREATE OR REPLACE FUNCTION "same_name"(
	"same_name" text /* &str */
) RETURNS text /* &str */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'same_name_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:90
-- pgx_tests::tests::fcinfo_tests::returns_tuple
CREATE OR REPLACE FUNCTION "returns_tuple"() RETURNS TABLE (
	"id" integer,  /* i32 */
	"title" text  /* alloc::string::String */
)
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'returns_tuple_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:251
-- pgx_tests::tests::fcinfo_tests::tests::test_same_name
CREATE OR REPLACE FUNCTION tests."test_same_name"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_same_name_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:172
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_i8
CREATE OR REPLACE FUNCTION tests."test_takes_i8"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_i8_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:243
-- pgx_tests::tests::fcinfo_tests::tests::test_returns_tuple
CREATE OR REPLACE FUNCTION tests."test_returns_tuple"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_returns_tuple_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:11
-- pgx_tests::tests::fcinfo_tests::takes_i16
CREATE OR REPLACE FUNCTION "takes_i16"(
	"i" smallint /* i16 */
) RETURNS smallint /* i16 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_i16_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:41
-- pgx_tests::tests::fcinfo_tests::takes_i8
CREATE OR REPLACE FUNCTION "takes_i8"(
	"i" "char" /* i8 */
) RETURNS "char" /* i8 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_i8_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:51
-- pgx_tests::tests::fcinfo_tests::takes_option
CREATE OR REPLACE FUNCTION "takes_option"(
	"i" integer /* core::option::Option<i32> */
) RETURNS integer /* i32 */
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_option_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:46
-- pgx_tests::tests::fcinfo_tests::takes_char
CREATE OR REPLACE FUNCTION "takes_char"(
	"i" varchar /* char */
) RETURNS varchar /* char */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_char_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:184
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_option_with_null_arg
CREATE OR REPLACE FUNCTION tests."test_takes_option_with_null_arg"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_option_with_null_arg_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:74
-- pgx_tests::tests::fcinfo_tests::returns_none
CREATE OR REPLACE FUNCTION "returns_none"() RETURNS integer /* core::option::Option<i32> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'returns_none_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:84
-- pgx_tests::tests::fcinfo_tests::returns_void
CREATE OR REPLACE FUNCTION "returns_void"() RETURNS void /* () */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'returns_void_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:6
-- pgx_tests::tests::fcinfo_tests::add_two_numbers
CREATE OR REPLACE FUNCTION "add_two_numbers"(
	"a" integer, /* i32 */
	"b" integer /* i32 */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'add_two_numbers_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:16
-- pgx_tests::tests::fcinfo_tests::takes_i32
CREATE OR REPLACE FUNCTION "takes_i32"(
	"i" integer /* i32 */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_i32_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:21
-- pgx_tests::tests::fcinfo_tests::takes_i64
CREATE OR REPLACE FUNCTION "takes_i64"(
	"i" integer /* i32 */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_i64_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:59
-- pgx_tests::tests::fcinfo_tests::takes_str
CREATE OR REPLACE FUNCTION "takes_str"(
	"s" text /* &str */
) RETURNS text /* &str */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_str_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:127
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_i32
CREATE OR REPLACE FUNCTION tests."test_takes_i32"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_i32_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:69
-- pgx_tests::tests::fcinfo_tests::returns_some
CREATE OR REPLACE FUNCTION "returns_some"() RETURNS integer /* core::option::Option<i32> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'returns_some_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:225
-- pgx_tests::tests::fcinfo_tests::tests::test_returns_none
CREATE OR REPLACE FUNCTION tests."test_returns_none"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_returns_none_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:154
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_f32
CREATE OR REPLACE FUNCTION tests."test_takes_f32"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_f32_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:163
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_f64
CREATE OR REPLACE FUNCTION tests."test_takes_f64"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_f64_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:118
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_i16
CREATE OR REPLACE FUNCTION tests."test_takes_i16"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_i16_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:231
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_void
CREATE OR REPLACE FUNCTION tests."test_takes_void"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_void_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:237
-- pgx_tests::tests::fcinfo_tests::tests::test_returns_void
CREATE OR REPLACE FUNCTION tests."test_returns_void"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_returns_void_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:36
-- pgx_tests::tests::fcinfo_tests::takes_f64
CREATE OR REPLACE FUNCTION "takes_f64"(
	"i" double precision /* f64 */
) RETURNS double precision /* f64 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_f64_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:178
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_char
CREATE OR REPLACE FUNCTION tests."test_takes_char"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_char_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:190
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_option_with_non_null_arg
CREATE OR REPLACE FUNCTION tests."test_takes_option_with_non_null_arg"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_option_with_non_null_arg_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:79
-- pgx_tests::tests::fcinfo_tests::takes_void
CREATE OR REPLACE FUNCTION "takes_void"(
	"_void" void /* () */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_void_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:113
-- pgx_tests::tests::fcinfo_tests::tests::test_add_two_numbers
CREATE OR REPLACE FUNCTION tests."test_add_two_numbers"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_add_two_numbers_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:219
-- pgx_tests::tests::fcinfo_tests::tests::test_returns_some
CREATE OR REPLACE FUNCTION tests."test_returns_some"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_returns_some_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:208
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_string
CREATE OR REPLACE FUNCTION tests."test_takes_string"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_string_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:136
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_i64
CREATE OR REPLACE FUNCTION tests."test_takes_i64"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_i64_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:145
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_bool
CREATE OR REPLACE FUNCTION tests."test_takes_bool"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_bool_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:31
-- pgx_tests::tests::fcinfo_tests::takes_f32
CREATE OR REPLACE FUNCTION "takes_f32"(
	"i" real /* f32 */
) RETURNS real /* f32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_f32_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:199
-- pgx_tests::tests::fcinfo_tests::tests::test_takes_str
CREATE OR REPLACE FUNCTION tests."test_takes_str"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_takes_str_wrapper';

-- pgx-tests/src/tests/fcinfo_tests.rs:26
-- pgx_tests::tests::fcinfo_tests::takes_bool
CREATE OR REPLACE FUNCTION "takes_bool"(
	"i" bool /* bool */
) RETURNS bool /* bool */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'takes_bool_wrapper';

-- pgx-tests/src/tests/enum_type_tests.rs:32
-- pgx_tests::tests::enum_type_tests::tests::test_foo_enum
CREATE OR REPLACE FUNCTION tests."test_foo_enum"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_foo_enum_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:44
-- pgx_tests::tests::default_arg_value_tests::tests::test_option_default_argument
CREATE OR REPLACE FUNCTION tests."test_option_default_argument"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_option_default_argument_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:37
-- pgx_tests::tests::default_arg_value_tests::tests::test_default_argument_specified
CREATE OR REPLACE FUNCTION tests."test_default_argument_specified"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_default_argument_specified_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:51
-- pgx_tests::tests::default_arg_value_tests::tests::test_option_default_argument_specified
CREATE OR REPLACE FUNCTION tests."test_option_default_argument_specified"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_option_default_argument_specified_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:30
-- pgx_tests::tests::default_arg_value_tests::tests::test_default_argument
CREATE OR REPLACE FUNCTION tests."test_default_argument"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_default_argument_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:11
-- pgx_tests::tests::default_arg_value_tests::option_default_argument
CREATE OR REPLACE FUNCTION "option_default_argument"(
	"a" text DEFAULT NULL /* core::option::Option<&str> */
) RETURNS text /* &str */
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'option_default_argument_wrapper';

-- pgx-tests/src/tests/default_arg_value_tests.rs:6
-- pgx_tests::tests::default_arg_value_tests::default_argument
CREATE OR REPLACE FUNCTION "default_argument"(
	"a" integer DEFAULT 99 /* i32 */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'default_argument_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:206
-- pgx_tests::tests::datetime_tests::tests::test_accept_timestamp_with_time_zone_not_utc
CREATE OR REPLACE FUNCTION tests."test_accept_timestamp_with_time_zone_not_utc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_timestamp_with_time_zone_not_utc_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:124
-- pgx_tests::tests::datetime_tests::tests::test_accept_date_yesterday
CREATE OR REPLACE FUNCTION tests."test_accept_date_yesterday"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_date_yesterday_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:191
-- pgx_tests::tests::datetime_tests::tests::test_accept_timestamp
CREATE OR REPLACE FUNCTION tests."test_accept_timestamp"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_timestamp_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:132
-- pgx_tests::tests::datetime_tests::tests::test_accept_date_tomorrow
CREATE OR REPLACE FUNCTION tests."test_accept_date_tomorrow"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_date_tomorrow_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:199
-- pgx_tests::tests::datetime_tests::tests::test_accept_timestamp_with_time_zone
CREATE OR REPLACE FUNCTION tests."test_accept_timestamp_with_time_zone"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_timestamp_with_time_zone_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:27
-- pgx_tests::tests::datetime_tests::accept_timestamp_with_time_zone
CREATE OR REPLACE FUNCTION "accept_timestamp_with_time_zone"(
	"t" timestamp with time zone /* pgx::datum::time_stamp_with_timezone::TimestampWithTimeZone */
) RETURNS timestamp with time zone /* pgx::datum::time_stamp_with_timezone::TimestampWithTimeZone */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'accept_timestamp_with_time_zone_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:231
-- pgx_tests::tests::datetime_tests::tests::test_is_timestamp_utc
CREATE OR REPLACE FUNCTION tests."test_is_timestamp_utc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_is_timestamp_utc_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:182
-- pgx_tests::tests::datetime_tests::tests::test_accept_time_random
CREATE OR REPLACE FUNCTION tests."test_accept_time_random"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_time_random_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:221
-- pgx_tests::tests::datetime_tests::tests::test_is_timestamp_with_time_zone_utc
CREATE OR REPLACE FUNCTION tests."test_is_timestamp_with_time_zone_utc"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_is_timestamp_with_time_zone_utc_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:22
-- pgx_tests::tests::datetime_tests::accept_timestamp
CREATE OR REPLACE FUNCTION "accept_timestamp"(
	"t" timestamp /* pgx::datum::time_stamp::Timestamp */
) RETURNS timestamp /* pgx::datum::time_stamp::Timestamp */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'accept_timestamp_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:173
-- pgx_tests::tests::datetime_tests::tests::test_accept_time_tomorrow
CREATE OR REPLACE FUNCTION tests."test_accept_time_tomorrow"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_time_tomorrow_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:213
-- pgx_tests::tests::datetime_tests::tests::test_return_3pm_mountain_time
CREATE OR REPLACE FUNCTION tests."test_return_3pm_mountain_time"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_3pm_mountain_time_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:12
-- pgx_tests::tests::datetime_tests::accept_time
CREATE OR REPLACE FUNCTION "accept_time"(
	"t" time /* pgx::datum::time::Time */
) RETURNS time /* pgx::datum::time::Time */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'accept_time_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:117
-- pgx_tests::tests::datetime_tests::tests::test_accept_date_now
CREATE OR REPLACE FUNCTION tests."test_accept_date_now"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_date_now_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:148
-- pgx_tests::tests::datetime_tests::tests::test_accept_time_now
CREATE OR REPLACE FUNCTION tests."test_accept_time_now"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_time_now_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:17
-- pgx_tests::tests::datetime_tests::accept_time_with_time_zone
CREATE OR REPLACE FUNCTION "accept_time_with_time_zone"(
	"t" time with time zone /* pgx::datum::time_with_timezone::TimeWithTimeZone */
) RETURNS time with time zone /* pgx::datum::time_with_timezone::TimeWithTimeZone */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'accept_time_with_time_zone_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:32
-- pgx_tests::tests::datetime_tests::return_3pm_mountain_time
CREATE OR REPLACE FUNCTION "return_3pm_mountain_time"() RETURNS timestamp with time zone /* pgx::datum::time_stamp_with_timezone::TimestampWithTimeZone */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_3pm_mountain_time_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:155
-- pgx_tests::tests::datetime_tests::tests::test_accept_time_with_time_zone_now
CREATE OR REPLACE FUNCTION tests."test_accept_time_with_time_zone_now"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_time_with_time_zone_now_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:164
-- pgx_tests::tests::datetime_tests::tests::test_accept_time_yesterday
CREATE OR REPLACE FUNCTION tests."test_accept_time_yesterday"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_time_yesterday_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:140
-- pgx_tests::tests::datetime_tests::tests::test_accept_date_random
CREATE OR REPLACE FUNCTION tests."test_accept_date_random"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_accept_date_random_wrapper';

-- pgx-tests/src/tests/datetime_tests.rs:7
-- pgx_tests::tests::datetime_tests::accept_date
CREATE OR REPLACE FUNCTION "accept_date"(
	"d" date /* pgx::datum::date::Date */
) RETURNS date /* pgx::datum::date::Date */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'accept_date_wrapper';

-- pgx-tests/src/tests/cfg_tests.rs:6
-- pgx_tests::tests::cfg_tests::func_test_cfg
CREATE OR REPLACE FUNCTION "func_test_cfg"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'func_test_cfg_wrapper';

-- pgx-tests/src/tests/cfg_tests.rs:21
-- pgx_tests::tests::cfg_tests::tests::test_cfg_exists
CREATE OR REPLACE FUNCTION tests."test_cfg_exists"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_cfg_exists_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:41
-- pgx_tests::tests::bytea_tests::tests::test_return_vec_bytes
CREATE OR REPLACE FUNCTION tests."test_return_vec_bytes"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_vec_bytes_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:12
-- pgx_tests::tests::bytea_tests::tests::return_bytes
CREATE OR REPLACE FUNCTION tests."return_bytes"() RETURNS bytea /* &[u8] */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_bytes_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:48
-- pgx_tests::tests::bytea_tests::tests::return_vec_subvec
CREATE OR REPLACE FUNCTION tests."return_vec_subvec"(
	"bytes" bytea /* alloc::vec::Vec<u8> */
) RETURNS bytea /* alloc::vec::Vec<u8> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_vec_subvec_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:17
-- pgx_tests::tests::bytea_tests::tests::test_return_bytes
CREATE OR REPLACE FUNCTION tests."test_return_bytes"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_bytes_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:29
-- pgx_tests::tests::bytea_tests::tests::test_return_bytes_slice
CREATE OR REPLACE FUNCTION tests."test_return_bytes_slice"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_bytes_slice_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:36
-- pgx_tests::tests::bytea_tests::tests::return_vec_bytes
CREATE OR REPLACE FUNCTION tests."return_vec_bytes"() RETURNS bytea /* alloc::vec::Vec<u8> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_vec_bytes_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:53
-- pgx_tests::tests::bytea_tests::tests::test_return_vec_subvec
CREATE OR REPLACE FUNCTION tests."test_return_vec_subvec"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_vec_subvec_wrapper';

-- pgx-tests/src/tests/bytea_tests.rs:24
-- pgx_tests::tests::bytea_tests::tests::return_bytes_slice
CREATE OR REPLACE FUNCTION tests."return_bytes_slice"(
	"bytes" bytea /* &[u8] */
) RETURNS bytea /* &[u8] */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_bytes_slice_wrapper';

-- pgx-tests/src/tests/array_tests.rs:59
-- pgx_tests::tests::array_tests::serde_serialize_array
CREATE OR REPLACE FUNCTION "serde_serialize_array"(
	"values" text[] /* pgx::datum::array::Array<&str> */
) RETURNS json /* pgx::datum::json::Json */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'serde_serialize_array_wrapper';

-- pgx-tests/src/tests/array_tests.rs:27
-- pgx_tests::tests::array_tests::count_true
CREATE OR REPLACE FUNCTION "count_true"(
	"values" bool[] /* pgx::datum::array::Array<bool> */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'count_true_wrapper';

-- pgx-tests/src/tests/array_tests.rs:17
-- pgx_tests::tests::array_tests::sum_array_siced
CREATE OR REPLACE FUNCTION "sum_array_siced"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS integer /* i32 */
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sum_array_i32_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:100
-- pgx_tests::tests::array_tests::tests::test_sum_array_i64
CREATE OR REPLACE FUNCTION tests."test_sum_array_i64"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_sum_array_i64_wrapper';

-- pgx-tests/src/tests/array_tests.rs:47
-- pgx_tests::tests::array_tests::iterate_array_with_deny_null
CREATE OR REPLACE FUNCTION "iterate_array_with_deny_null"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'iterate_array_with_deny_null_wrapper';

-- pgx-tests/src/tests/array_tests.rs:93
-- pgx_tests::tests::array_tests::tests::test_sum_array_i32
CREATE OR REPLACE FUNCTION tests."test_sum_array_i32"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_sum_array_i32_wrapper';

-- pgx-tests/src/tests/array_tests.rs:190
-- pgx_tests::tests::array_tests::tests::test_return_text_array
CREATE OR REPLACE FUNCTION tests."test_return_text_array"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_text_array_wrapper';

-- pgx-tests/src/tests/array_tests.rs:42
-- pgx_tests::tests::array_tests::optional_array_arg
CREATE OR REPLACE FUNCTION "optional_array_arg"(
	"values" real[] /* core::option::Option<pgx::datum::array::Array<f32>> */
) RETURNS real /* f32 */
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'optional_array_arg_wrapper';

-- pgx-tests/src/tests/array_tests.rs:197
-- pgx_tests::tests::array_tests::tests::test_return_zero_length_vec
CREATE OR REPLACE FUNCTION tests."test_return_zero_length_vec"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_return_zero_length_vec_wrapper';

-- pgx-tests/src/tests/array_tests.rs:128
-- pgx_tests::tests::array_tests::tests::test_count_true
CREATE OR REPLACE FUNCTION tests."test_count_true"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_count_true_wrapper';

-- pgx-tests/src/tests/array_tests.rs:37
-- pgx_tests::tests::array_tests::count_nulls
CREATE OR REPLACE FUNCTION "count_nulls"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'count_nulls_wrapper';

-- pgx-tests/src/tests/array_tests.rs:177
-- pgx_tests::tests::array_tests::tests::test_serde_serialize_array_i32
CREATE OR REPLACE FUNCTION tests."test_serde_serialize_array_i32"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_serde_serialize_array_i32_wrapper';

-- pgx-tests/src/tests/array_tests.rs:107
-- pgx_tests::tests::array_tests::tests::test_sum_array_i32_sliced
CREATE OR REPLACE FUNCTION tests."test_sum_array_i32_sliced"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_sum_array_i32_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:79
-- pgx_tests::tests::array_tests::return_zero_length_vec
CREATE OR REPLACE FUNCTION "return_zero_length_vec"() RETURNS integer[] /* alloc::vec::Vec<i32> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_zero_length_vec_wrapper';

-- pgx-tests/src/tests/array_tests.rs:22
-- pgx_tests::tests::array_tests::sum_array_sliced
CREATE OR REPLACE FUNCTION "sum_array_sliced"(
	"values" bigint[] /* pgx::datum::array::Array<i64> */
) RETURNS bigint /* i64 */
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sum_array_i64_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:156
-- pgx_tests::tests::array_tests::tests::test_array_deny_nulls
CREATE OR REPLACE FUNCTION tests."test_array_deny_nulls"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_array_deny_nulls_wrapper';

-- pgx-tests/src/tests/array_tests.rs:184
-- pgx_tests::tests::array_tests::tests::test_serde_serialize_array_i32_deny_null
CREATE OR REPLACE FUNCTION tests."test_serde_serialize_array_i32_deny_null"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_serde_serialize_array_i32_deny_null_wrapper';

-- pgx-tests/src/tests/array_tests.rs:74
-- pgx_tests::tests::array_tests::return_text_array
CREATE OR REPLACE FUNCTION "return_text_array"() RETURNS text[] /* alloc::vec::Vec<&str> */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'return_text_array_wrapper';

-- pgx-tests/src/tests/array_tests.rs:161
-- pgx_tests::tests::array_tests::tests::test_serde_serialize_array
CREATE OR REPLACE FUNCTION tests."test_serde_serialize_array"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_serde_serialize_array_wrapper';

-- pgx-tests/src/tests/array_tests.rs:12
-- pgx_tests::tests::array_tests::sum_array
CREATE OR REPLACE FUNCTION "sum_array"(
	"values" bigint[] /* pgx::datum::array::Array<i64> */
) RETURNS bigint /* i64 */
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sum_array_i64_wrapper';

-- pgx-tests/src/tests/array_tests.rs:54
-- pgx_tests::tests::array_tests::optional_array_with_default
CREATE OR REPLACE FUNCTION "optional_array_with_default"(
	"values" integer[] DEFAULT NULL /* core::option::Option<pgx::datum::array::Array<i32>> */
) RETURNS integer /* i32 */
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'optional_array_with_default_wrapper';

-- pgx-tests/src/tests/array_tests.rs:135
-- pgx_tests::tests::array_tests::tests::test_count_true_sliced
CREATE OR REPLACE FUNCTION tests."test_count_true_sliced"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_count_true_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:32
-- pgx_tests::tests::array_tests::count_true_sliced
CREATE OR REPLACE FUNCTION "count_true_sliced"(
	"values" bool[] /* pgx::datum::array::Array<bool> */
) RETURNS integer /* i32 */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'count_true_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:121
-- pgx_tests::tests::array_tests::tests::test_sum_array_i32_overflow
CREATE OR REPLACE FUNCTION tests."test_sum_array_i32_overflow"() RETURNS void
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_sum_array_i32_overflow_wrapper';

-- pgx-tests/src/tests/array_tests.rs:149
-- pgx_tests::tests::array_tests::tests::test_optional_array
CREATE OR REPLACE FUNCTION tests."test_optional_array"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_optional_array_wrapper';

-- pgx-tests/src/tests/array_tests.rs:170
-- pgx_tests::tests::array_tests::tests::test_optional_array_with_default
CREATE OR REPLACE FUNCTION tests."test_optional_array_with_default"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_optional_array_with_default_wrapper';

-- pgx-tests/src/tests/array_tests.rs:69
-- pgx_tests::tests::array_tests::serde_serialize_array_i32_deny_null
CREATE OR REPLACE FUNCTION "serde_serialize_array_i32_deny_null"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS json /* pgx::datum::json::Json */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'serde_serialize_array_i32_deny_null_wrapper';

-- pgx-tests/src/tests/array_tests.rs:114
-- pgx_tests::tests::array_tests::tests::test_sum_array_i64_sliced
CREATE OR REPLACE FUNCTION tests."test_sum_array_i64_sliced"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_sum_array_i64_sliced_wrapper';

-- pgx-tests/src/tests/array_tests.rs:142
-- pgx_tests::tests::array_tests::tests::test_count_nulls
CREATE OR REPLACE FUNCTION tests."test_count_nulls"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_count_nulls_wrapper';

-- pgx-tests/src/tests/array_tests.rs:7
-- pgx_tests::tests::array_tests::sum_array
CREATE OR REPLACE FUNCTION "sum_array"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS integer /* i32 */
 STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'sum_array_i32_wrapper';

-- pgx-tests/src/tests/array_tests.rs:64
-- pgx_tests::tests::array_tests::serde_serialize_array_i32
CREATE OR REPLACE FUNCTION "serde_serialize_array_i32"(
	"values" integer[] /* pgx::datum::array::Array<i32> */
) RETURNS json /* pgx::datum::json::Json */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'serde_serialize_array_i32_wrapper';

-- pgx-tests/src/tests/anyarray_tests.rs:6
-- pgx_tests::tests::anyarray_tests::anyarray_arg
CREATE OR REPLACE FUNCTION "anyarray_arg"(
	"array" anyarray /* pgx::datum::anyarray::AnyArray */
) RETURNS json /* pgx::datum::json::Json */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'anyarray_arg_wrapper';

-- pgx-tests/src/tests/anyarray_tests.rs:21
-- pgx_tests::tests::anyarray_tests::tests::test_anyarray_arg
CREATE OR REPLACE FUNCTION tests."test_anyarray_arg"() RETURNS void
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'test_anyarray_arg_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:13
-- pgx_tests::tests::schema_tests::test_schema::TestType
CREATE TYPE test_schema.TestType;

-- pgx-tests/src/tests/schema_tests.rs:13
-- pgx_tests::tests::schema_tests::test_schema::testtype_in
CREATE OR REPLACE FUNCTION test_schema."testtype_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS test_schema.TestType /* pgx_tests::tests::schema_tests::test_schema::TestType */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'testtype_in_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:13
-- pgx_tests::tests::schema_tests::test_schema::testtype_out
CREATE OR REPLACE FUNCTION test_schema."testtype_out"(
	"input" test_schema.TestType /* pgx_tests::tests::schema_tests::test_schema::TestType */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'testtype_out_wrapper';

-- pgx-tests/src/tests/schema_tests.rs:13
-- pgx_tests::tests::schema_tests::test_schema::TestType
CREATE TYPE test_schema.TestType (
	INTERNALLENGTH = variable,
	INPUT = test_schema.testtype_in, /* pgx_tests::tests::schema_tests::test_schema::testtype_in */
	OUTPUT = test_schema.testtype_out, /* pgx_tests::tests::schema_tests::test_schema::testtype_out */
	STORAGE = extended
);

-- pgx-tests/src/tests/schema_tests.rs:20
-- pgx_tests::tests::schema_tests::type_in_diff_schema
CREATE OR REPLACE FUNCTION "type_in_diff_schema"() RETURNS test_schema.TestType /* pgx_tests::tests::schema_tests::test_schema::TestType */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'type_in_diff_schema_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:6
-- pgx_tests::tests::postgres_type_tests::VarlenaType
CREATE TYPE VarlenaType;

-- pgx-tests/src/tests/postgres_type_tests.rs:6
-- pgx_tests::tests::postgres_type_tests::varlenatype_in
CREATE OR REPLACE FUNCTION "varlenatype_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS VarlenaType /* pgx::datum::varlena::PgVarlena<pgx_tests::tests::postgres_type_tests::VarlenaType> */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'varlenatype_in_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:6
-- pgx_tests::tests::postgres_type_tests::varlenatype_out
CREATE OR REPLACE FUNCTION "varlenatype_out"(
	"input" VarlenaType /* pgx::datum::varlena::PgVarlena<pgx_tests::tests::postgres_type_tests::VarlenaType> */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'varlenatype_out_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:6
-- pgx_tests::tests::postgres_type_tests::VarlenaType
CREATE TYPE VarlenaType (
	INTERNALLENGTH = variable,
	INPUT = varlenatype_in, /* pgx_tests::tests::postgres_type_tests::varlenatype_in */
	OUTPUT = varlenatype_out, /* pgx_tests::tests::postgres_type_tests::varlenatype_out */
	STORAGE = extended
);

-- pgx-tests/src/tests/postgres_type_tests.rs:56
-- pgx_tests::tests::postgres_type_tests::JsonType
CREATE TYPE JsonType;

-- pgx-tests/src/tests/postgres_type_tests.rs:56
-- pgx_tests::tests::postgres_type_tests::jsontype_in
CREATE OR REPLACE FUNCTION "jsontype_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS JsonType /* pgx_tests::tests::postgres_type_tests::JsonType */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'jsontype_in_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:56
-- pgx_tests::tests::postgres_type_tests::jsontype_out
CREATE OR REPLACE FUNCTION "jsontype_out"(
	"input" JsonType /* pgx_tests::tests::postgres_type_tests::JsonType */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'jsontype_out_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:56
-- pgx_tests::tests::postgres_type_tests::JsonType
CREATE TYPE JsonType (
	INTERNALLENGTH = variable,
	INPUT = jsontype_in, /* pgx_tests::tests::postgres_type_tests::jsontype_in */
	OUTPUT = jsontype_out, /* pgx_tests::tests::postgres_type_tests::jsontype_out */
	STORAGE = extended
);

-- pgx-tests/src/tests/postgres_type_tests.rs:31
-- pgx_tests::tests::postgres_type_tests::CustomTextFormatSerializedType
CREATE TYPE CustomTextFormatSerializedType;

-- pgx-tests/src/tests/postgres_type_tests.rs:31
-- pgx_tests::tests::postgres_type_tests::customtextformatserializedtype_in
CREATE OR REPLACE FUNCTION "customtextformatserializedtype_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS CustomTextFormatSerializedType /* pgx_tests::tests::postgres_type_tests::CustomTextFormatSerializedType */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'customtextformatserializedtype_in_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:31
-- pgx_tests::tests::postgres_type_tests::customtextformatserializedtype_out
CREATE OR REPLACE FUNCTION "customtextformatserializedtype_out"(
	"input" CustomTextFormatSerializedType /* pgx_tests::tests::postgres_type_tests::CustomTextFormatSerializedType */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'customtextformatserializedtype_out_wrapper';

-- pgx-tests/src/tests/postgres_type_tests.rs:31
-- pgx_tests::tests::postgres_type_tests::CustomTextFormatSerializedType
CREATE TYPE CustomTextFormatSerializedType (
	INTERNALLENGTH = variable,
	INPUT = customtextformatserializedtype_in, /* pgx_tests::tests::postgres_type_tests::customtextformatserializedtype_in */
	OUTPUT = customtextformatserializedtype_out, /* pgx_tests::tests::postgres_type_tests::customtextformatserializedtype_out */
	STORAGE = extended
);

-- pgx-tests/src/tests/derive_pgtype_lifetimes.rs:13
-- pgx_tests::tests::derive_pgtype_lifetimes::ProximityPart
CREATE TYPE ProximityPart;

-- pgx-tests/src/tests/derive_pgtype_lifetimes.rs:13
-- pgx_tests::tests::derive_pgtype_lifetimes::proximitypart_in
CREATE OR REPLACE FUNCTION "proximitypart_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS ProximityPart /* pgx_tests::tests::derive_pgtype_lifetimes::ProximityPart */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'proximitypart_in_wrapper';

-- pgx-tests/src/tests/derive_pgtype_lifetimes.rs:13
-- pgx_tests::tests::derive_pgtype_lifetimes::proximitypart_out
CREATE OR REPLACE FUNCTION "proximitypart_out"(
	"input" ProximityPart /* pgx_tests::tests::derive_pgtype_lifetimes::ProximityPart */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'proximitypart_out_wrapper';

-- pgx-tests/src/tests/derive_pgtype_lifetimes.rs:13
-- pgx_tests::tests::derive_pgtype_lifetimes::ProximityPart
CREATE TYPE ProximityPart (
	INTERNALLENGTH = variable,
	INPUT = proximitypart_in, /* pgx_tests::tests::derive_pgtype_lifetimes::proximitypart_in */
	OUTPUT = proximitypart_out, /* pgx_tests::tests::derive_pgtype_lifetimes::proximitypart_out */
	STORAGE = extended
);

-- pgx-tests/src/tests/enum_type_tests.rs:6
-- pgx_tests::tests::enum_type_tests::Foo
CREATE TYPE Foo AS ENUM (
	'One',
	'Two',
	'Three'
);

-- pgx-tests/src/tests/enum_type_tests.rs:13
-- pgx_tests::tests::enum_type_tests::take_foo_enum
CREATE OR REPLACE FUNCTION "take_foo_enum"(
	"value" Foo /* pgx_tests::tests::enum_type_tests::Foo */
) RETURNS Foo /* pgx_tests::tests::enum_type_tests::Foo */
STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'take_foo_enum_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:15
-- creates:
--   Type(pgx_tests::tests::struct_type_tests::Complex)

CREATE TYPE complex;

-- pgx-tests/src/tests/struct_type_tests.rs:21
-- pgx_tests::tests::struct_type_tests::complex_in
CREATE OR REPLACE FUNCTION "complex_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS Complex /* pgx::pgbox::PgBox<pgx_tests::tests::struct_type_tests::Complex> */
IMMUTABLE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'complex_in_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:38
-- pgx_tests::tests::struct_type_tests::complex_out
CREATE OR REPLACE FUNCTION "complex_out"(
	"complex" Complex /* pgx::pgbox::PgBox<pgx_tests::tests::struct_type_tests::Complex> */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'complex_out_wrapper';

-- pgx-tests/src/tests/struct_type_tests.rs:45
-- requires:
--   create_complex_shell_type
--   complex_in
--   complex_out


CREATE TYPE complex (
   internallength = 16,
   input = complex_in,
   output = complex_out,
   alignment = double
);

