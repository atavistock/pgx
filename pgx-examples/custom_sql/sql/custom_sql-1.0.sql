/* 
This file is auto generated by pgx.

The ordering of items is not stable, it is driven by a dependency graph.
*/

-- src/lib.rs:45
-- bootstrap

CREATE TABLE extension_sql (message TEXT);
INSERT INTO extension_sql VALUES ('bootstrap');


-- src/lib.rs:13
CREATE SCHEMA IF NOT EXISTS dogs; /* custom_sql::home::dogs */

-- src/lib.rs:17
-- custom_sql::home::dogs::Dog
CREATE TYPE dogs.Dog AS ENUM (
	'Brandy',
	'Nami'
);

-- src/lib.rs:9
CREATE SCHEMA IF NOT EXISTS home; /* custom_sql::home */

-- src/lib.rs:25
-- custom_sql::home::Ball
CREATE TYPE home.Ball;

-- src/lib.rs:25
-- custom_sql::home::ball_in
CREATE OR REPLACE FUNCTION home."ball_in"(
	"input" cstring /* &std::ffi::c_str::CStr */
) RETURNS home.Ball /* custom_sql::home::Ball */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ball_in_wrapper';

-- src/lib.rs:25
-- custom_sql::home::ball_out
CREATE OR REPLACE FUNCTION home."ball_out"(
	"input" home.Ball /* custom_sql::home::Ball */
) RETURNS cstring /* &std::ffi::c_str::CStr */
IMMUTABLE PARALLEL SAFE STRICT
LANGUAGE c /* Rust */
AS 'MODULE_PATHNAME', 'ball_out_wrapper';

-- src/lib.rs:25
-- custom_sql::home::Ball
CREATE TYPE home.Ball (
	INTERNALLENGTH = variable,
	INPUT = home.ball_in, /* custom_sql::home::ball_in */
	OUTPUT = home.ball_out, /* custom_sql::home::ball_out */
	STORAGE = extended
);

-- src/lib.rs:53
-- requires:
--   home::dogs



        INSERT INTO extension_sql VALUES ('single_raw');


-- src/lib.rs:70
-- requires:
--   single_raw

INSERT INTO extension_sql VALUES ('single');


-- src/lib.rs:60
-- requires:
--   Dog
--   home::Ball
--   single_raw
--   single


INSERT INTO extension_sql VALUES ('multiple_raw');


-- src/lib.rs:71
-- requires:
--   Dog
--   home::Ball
--   single_raw
--   single
--   multiple_raw

INSERT INTO extension_sql VALUES ('multiple');


-- src/lib.rs:75
-- finalize
INSERT INTO extension_sql VALUES ('finalizer');

